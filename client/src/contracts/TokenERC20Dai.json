{
  "contractName": "TokenERC20Dai",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ETHAmount",
          "type": "uint256"
        }
      ],
      "name": "ContractEmptied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"ContractEmptied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Raphael Pinto Gregorio\",\"details\":\"The token has all classic ERC-20 functions: totalSupply(), balanceOf(), transfer(), allowance(), approve(), transferFrom(). It has two decimals.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}. \"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawETH()\":{\"details\":\"transfer contract's ETH to current owner, emit an event called ContractEmptied An event SwapContractEmptied containing the owner address and the ETH amount sent is emitted\"}},\"title\":\"ALY ERC-20 contract\"},\"userdoc\":{\"methods\":{\"withdrawETH()\":{\"notice\":\"withdraw ETH stuck in the contract \"}},\"notice\":\"Basic ERC-20 token based on OpenZepellin ERC-20 standard\"}},\"settings\":{\"compilationTarget\":{\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/TokenERC20Dai.sol\":\"TokenERC20Dai\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/Context.sol\":{\"keccak256\":\"0xbfa19336d06a924a20a4a28c20f093d802ff19c26dd63fd5de88856f9fd4a715\",\"urls\":[\"bzz-raw://1ac7d3637b591d0a9dee28edc64937223de71ee4855837e89bb6e2d502d78c9e\",\"dweb:/ipfs/QmPKiMnnfeRkaHLbLb5dxBFJzor2M5KXMuRwikZ3krXChE\"]},\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/ERC20.sol\":{\"keccak256\":\"0x1a716c300b7b7239727d24ef32764fcad03452c65e6156621e7c190b0ddaf53a\",\"urls\":[\"bzz-raw://26b91e58f213579c3348767daf0c8c1152e2130964d91f17426f010acf6f6850\",\"dweb:/ipfs/QmNuhUb6KU5T5TdTJZqppmLTA6Xchuzf8U5gCRUonciGMS\"]},\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/IERC20.sol\":{\"keccak256\":\"0x7e7147a81b4b0eb0ef26ee5d32b1686d1c91ed42f817c95a36ffe14882a1bd38\",\"urls\":[\"bzz-raw://c9897b3ee0e949c1889f9444ada77c27371da73b18c984794c06b4c6dcf2309a\",\"dweb:/ipfs/QmWnFktX7RZJnYpFWMiG5uFPf45zHAmRyyzuPQhK5i2HGG\"]},\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/Ownable.sol\":{\"keccak256\":\"0xd2d6131289d452d1f125fc51919d58d0b167d4acca9b2a418e380cb64a8352a6\",\"urls\":[\"bzz-raw://bbf1f0ce54bf2988692b09520003182df6363267688925b1f2bbcec36b46fd5c\",\"dweb:/ipfs/QmYQgeBrUo22nXH7svKrwMoqjWhG4qZvnuYE5DSARmCHep\"]},\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/SafeMath.sol\":{\"keccak256\":\"0x55bfb7c9952cd96173a12832726a54bb7f0eced0baaec6c9a19e421429062644\",\"urls\":[\"bzz-raw://5645dcceaabd7c86a7571913861085278f37854cbf7eaf5a0bbb968bbf13c94d\",\"dweb:/ipfs/QmRCFtcEsRiEvBTbZtnuQ7nJnPdfhvt28XKhtaeaJngWQN\"]},\"/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/TokenERC20Dai.sol\":{\"keccak256\":\"0x5d5fca7fb214350944c33f0de752552be18727bf0147b35c6b2a0b79199a41e9\",\"urls\":[\"bzz-raw://8ad4808356391c08c01324c790a6e2f7ffe0313a1a74d2fc06b7027d6f6be175\",\"dweb:/ipfs/QmdjtEbgQmr1eWAFKcKPSFsw3kjdTSbAEETfktc6nbn3tG\"]}},\"version\":1}",
  "bytecode": "0x6080604052600062000016620001be60201b60201c565b905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506040518060400160405280600f81526020017f455243323020546f6b656e204461690000000000000000000000000000000000815250600490805190602001906200010292919062000419565b506040518060400160405280600381526020017f4441490000000000000000000000000000000000000000000000000000000000815250600590805190602001906200015092919062000419565b50600260068190555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600981905550620001b8336305f5e100620001c660201b60201c565b620004c8565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b62000286816002546200039060201b620016fd1790919060201c565b600281905550620002e4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200039060201b620016fd1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000808284019050838110156200040f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200045c57805160ff19168380011785556200048d565b828001600101855582156200048d579182015b828111156200048c5782518255916020019190600101906200046f565b5b5090506200049c9190620004a0565b5090565b620004c591905b80821115620004c1576000816000905550600101620004a7565b5090565b90565b611c3e80620004d86000396000f3fe60806040526004361061010d5760003560e01c80638da5cb5b11610095578063a9059cbb11610064578063a9059cbb146105a8578063d3c9cc261461061b578063dd62ed3e14610656578063e086e5ec146106db578063f2fde38b146106f257610114565b80638da5cb5b1461041f5780638f32d59b1461047657806395d89b41146104a5578063a457c2d71461053557610114565b8063313ce567116100dc578063313ce567146102da57806339509351146103055780633eaaf86b1461037857806370a08231146103a3578063715018a61461040857610114565b806306fdde0314610119578063095ea7b3146101a957806318160ddd1461021c57806323b872dd1461024757610114565b3661011457005b600080fd5b34801561012557600080fd5b5061012e610743565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016e578082015181840152602081019050610153565b50505050905090810190601f16801561019b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b557600080fd5b50610202600480360360408110156101cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e1565b604051808215151515815260200191505060405180910390f35b34801561022857600080fd5b506102316107ff565b6040518082815260200191505060405180910390f35b34801561025357600080fd5b506102c06004803603606081101561026a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610809565b604051808215151515815260200191505060405180910390f35b3480156102e657600080fd5b506102ef6109db565b6040518082815260200191505060405180910390f35b34801561031157600080fd5b5061035e6004803603604081101561032857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109e1565b604051808215151515815260200191505060405180910390f35b34801561038457600080fd5b5061038d610a94565b6040518082815260200191505060405180910390f35b3480156103af57600080fd5b506103f2600480360360208110156103c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9a565b6040518082815260200191505060405180910390f35b34801561041457600080fd5b5061041d610ae2565b005b34801561042b57600080fd5b50610434610c1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048257600080fd5b5061048b610c47565b604051808215151515815260200191505060405180910390f35b3480156104b157600080fd5b506104ba610ca6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104fa5780820151818401526020810190506104df565b50505050905090810190601f1680156105275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054157600080fd5b5061058e6004803603604081101561055857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d44565b604051808215151515815260200191505060405180910390f35b3480156105b457600080fd5b50610601600480360360408110156105cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e11565b604051808215151515815260200191505060405180910390f35b34801561062757600080fd5b506106546004803603602081101561063e57600080fd5b8101908080359060200190929190505050610e2f565b005b34801561066257600080fd5b506106c56004803603604081101561067957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f03565b6040518082815260200191505060405180910390f35b3480156106e757600080fd5b506106f0610f8a565b005b3480156106fe57600080fd5b506107416004803603602081101561071557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611102565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b505050505081565b60006107f56107ee611188565b8484611190565b6001905092915050565b6000600254905090565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610855611188565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f496e73756666696369656e7420616c6c6f77616e63650000000000000000000081525060200191505060405180910390fd5b61090f848484611387565b6109d08461091b611188565b6109cb85604051806060016040528060288152602001611b4b60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610981611188565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163d9092919063ffffffff16565b611190565b600190509392505050565b60065481565b6000610a8a6109ee611188565b84610a8585600160006109ff611188565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116fd90919063ffffffff16565b611190565b6001905092915050565b60075481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610aea610c47565b610b5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c8a611188565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d3c5780601f10610d1157610100808354040283529160200191610d3c565b820191906000526020600020905b815481529060010190602001808311610d1f57829003601f168201915b505050505081565b6000610e07610d51611188565b84610e0285604051806060016040528060258152602001611be46025913960016000610d7b611188565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163d9092919063ffffffff16565b611190565b6001905092915050565b6000610e25610e1e611188565b8484611387565b6001905092915050565b62989680811115610e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180611bbc6028913960400191505060405180910390fd5b6000429050607860095401811015610eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180611aaa6033913960400191505060405180910390fd5b42600981905550610eff3383611785565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610f92610c47565b611004576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600030905060008173ffffffffffffffffffffffffffffffffffffffff16319050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561108d573d6000803e3d6000fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f26feae0d15fe6dd2802afe197e1169e2d5e5aaffe2d7e7560b4c91d76231d4e5826040518082815260200191505060405180910390a25050565b61110a610c47565b61117c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61118581611940565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611216576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180611b986024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561129c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611b036022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561140d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180611b736025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611493576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611a876023913960400191505060405180910390fd5b6114fe81604051806060016040528060268152602001611b25602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611591816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116fd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008383111582906116ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116af578082015181840152602081019050611694565b50505050905090810190601f1680156116dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008082840190508381101561177b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b61183d816002546116fd90919063ffffffff16565b600281905550611894816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116fd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611add6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737346756e6374696f6e2063616e2062652063616c6c65642065766572792074776f206d696e75746573206f6e6c792c20776169744f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373526571756972656420616d6f756e74206d757374206265206c657373207468616e2031303030303045524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122027592673616a2c83c2d63ed7623245f8f52e4e3e50b9dbff129a63b1e85ee07664736f6c63430006020033",
  "deployedBytecode": "",
  "sourceMap": "361:1405:8:-:0;;;693:17:4;713:12;:10;;;:12;;:::i;:::-;693:32;;744:9;735:6;;:18;;;;;;;;;;;;;;;;;;801:9;768:43;;797:1;768:43;;;;;;;;;;;;659:159;702:24:8;;;;;;;;;;;;;;;;;:4;:24;;;;;;;;;;;;:::i;:::-;;736:14;;;;;;;;;;;;;;;;;:6;:14;;;;;;;;;;;;:::i;:::-;;771:1;760:8;:12;;;;791:10;782:6;;:19;;;;;;;;;;;;;;;;;;831:1;811:17;:21;;;;851:28;857:10;869:9;851:5;;;:28;;:::i;:::-;361:1405;;788:96:0;833:15;867:10;860:17;;788:96;:::o;6088:302:1:-;6182:1;6163:21;;:7;:21;;;;6155:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6246:24;6263:6;6246:12;;:16;;;;;;:24;;;;:::i;:::-;6231:12;:39;;;;6301:30;6324:6;6301:9;:18;6311:7;6301:18;;;;;;;;;;;;;;;;:22;;;;;;:30;;;;:::i;:::-;6280:9;:18;6290:7;6280:18;;;;;;;;;;;;;;;:51;;;;6367:7;6346:37;;6363:1;6346:37;;;6376:6;6346:37;;;;;;;;;;;;;;;;;;6088:302;;:::o;834:176:5:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;361:1405:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "361:1405:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;408:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;408:18:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;408:18:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2520:158:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2520:158:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2520:158:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1542:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1542:98:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3136:397;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3136:397:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3136:397:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;458:23:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;458:23:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3928:207:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3928:207:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3928:207:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;487:27:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;487:27:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1699:117:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1699:117:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1699:117:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1679:137:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1679:137:4;;;:::i;:::-;;894:77;;8:9:-1;5:2;;;30:1;27;20:12;5:2;894:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1245:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1245:92:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;432:20:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;432:20:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;432:20:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4622:258:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4622:258:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4622:258:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2019:164;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2019:164:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2019:164:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;927:360:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;927:360:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;927:360:8;;;;;;;;;;;;;;;;;:::i;:::-;;2241:141:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2241:141:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2241:141:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1538:226:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1538:226:8;;;:::i;:::-;;1965:107:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1965:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1965:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;408:18:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2520:158:1:-;2595:4;2611:39;2620:12;:10;:12::i;:::-;2634:7;2643:6;2611:8;:39::i;:::-;2667:4;2660:11;;2520:158;;;;:::o;1542:98::-;1595:7;1621:12;;1614:19;;1542:98;:::o;3136:397::-;3234:4;3295:6;3258:11;:19;3270:6;3258:19;;;;;;;;;;;;;;;:33;3278:12;:10;:12::i;:::-;3258:33;;;;;;;;;;;;;;;;:43;;3250:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3338:36;3348:6;3356:9;3367:6;3338:9;:36::i;:::-;3384:121;3393:6;3401:12;:10;:12::i;:::-;3415:89;3453:6;3415:89;;;;;;;;;;;;;;;;;:11;:19;3427:6;3415:19;;;;;;;;;;;;;;;:33;3435:12;:10;:12::i;:::-;3415:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;3384:8;:121::i;:::-;3522:4;3515:11;;3136:397;;;;;:::o;458:23:8:-;;;;:::o;3928:207:1:-;4008:4;4024:83;4033:12;:10;:12::i;:::-;4047:7;4056:50;4095:10;4056:11;:25;4068:12;:10;:12::i;:::-;4056:25;;;;;;;;;;;;;;;:34;4082:7;4056:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;4024:8;:83::i;:::-;4124:4;4117:11;;3928:207;;;;:::o;487:27:8:-;;;;:::o;1699:117:1:-;1765:7;1791:9;:18;1801:7;1791:18;;;;;;;;;;;;;;;;1784:25;;1699:117;;;:::o;1679:137:4:-;1098:9;:7;:9::i;:::-;1090:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1777:1:::1;1740:40;;1761:6;;;;;;;;;;;1740:40;;;;;;;;;;;;1807:1;1790:6;;:19;;;;;;;;;;;;;;;;;;1679:137::o:0;894:77::-;932:7;958:6;;;;;;;;;;;951:13;;894:77;:::o;1245:92::-;1285:4;1324:6;;;;;;;;;;;1308:22;;:12;:10;:12::i;:::-;:22;;;1301:29;;1245:92;:::o;432:20:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4622:258:1:-;4707:4;4723:129;4732:12;:10;:12::i;:::-;4746:7;4755:96;4794:15;4755:96;;;;;;;;;;;;;;;;;:11;:25;4767:12;:10;:12::i;:::-;4755:25;;;;;;;;;;;;;;;:34;4781:7;4755:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;4723:8;:129::i;:::-;4869:4;4862:11;;4622:258;;;;:::o;2019:164::-;2097:4;2113:42;2123:12;:10;:12::i;:::-;2137:9;2148:6;2113:9;:42::i;:::-;2172:4;2165:11;;2019:164;;;;:::o;927:360:8:-;997:8;987:6;:18;;979:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1060:21;1084:3;1060:27;;1142:13;1122:17;;:33;1105:13;:50;;1097:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1242:3;1222:17;:23;;;;1255:25;1261:10;1273:6;1255:5;:25::i;:::-;927:360;;:::o;2241:141:1:-;2322:7;2348:11;:18;2360:5;2348:18;;;;;;;;;;;;;;;:27;2367:7;2348:27;;;;;;;;;;;;;;;;2341:34;;2241:141;;;;:::o;1538:226:8:-;1098:9:4;:7;:9::i;:::-;1090:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1590:20:8::1;1621:4;1590:36;;1636:18;1657:4;:12;;;1636:33;;1680:6;;;;;;;;;;;:15;;:27;1696:10;1680:27;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;1680:27:8;1738:6;;;;;;;;;;;1722:35;;;1746:10;1722:35;;;;;;;;;;;;;;;;;;1154:1:4;;1538:226:8:o:0;1965:107:4:-;1098:9;:7;:9::i;:::-;1090:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2037:28:::1;2056:8;2037:18;:28::i;:::-;1965:107:::0;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;7476:332:1:-;7586:1;7569:19;;:5;:19;;;;7561:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7666:1;7647:21;;:7;:21;;;;7639:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7748:6;7718:11;:18;7730:5;7718:18;;;;;;;;;;;;;;;:27;7737:7;7718:27;;;;;;;;;;;;;;;:36;;;;7785:7;7769:32;;7778:5;7769:32;;;7794:6;7769:32;;;;;;;;;;;;;;;;;;7476:332;;;:::o;5354:464::-;5469:1;5451:20;;:6;:20;;;;5443:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5552:1;5531:23;;:9;:23;;;;5523:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5625;5647:6;5625:71;;;;;;;;;;;;;;;;;:9;:17;5635:6;5625:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;5605:9;:17;5615:6;5605:17;;;;;;;;;;;;;;;:91;;;;5729:32;5754:6;5729:9;:20;5739:9;5729:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;5706:9;:20;5716:9;5706:20;;;;;;;;;;;;;;;:55;;;;5793:9;5776:35;;5785:6;5776:35;;;5804:6;5776:35;;;;;;;;;;;;;;;;;;5354:464;;;:::o;1732:187:5:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;6088:302:1:-;6182:1;6163:21;;:7;:21;;;;6155:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6246:24;6263:6;6246:12;;:16;;:24;;;;:::i;:::-;6231:12;:39;;;;6301:30;6324:6;6301:9;:18;6311:7;6301:18;;;;;;;;;;;;;;;;:22;;:30;;;;:::i;:::-;6280:9;:18;6290:7;6280:18;;;;;;;;;;;;;;;:51;;;;6367:7;6346:37;;6363:1;6346:37;;;6376:6;6346:37;;;;;;;;;;;;;;;;;;6088:302;;:::o;2173:225:4:-;2266:1;2246:22;;:8;:22;;;;2238:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2355:8;2326:38;;2347:6;;;;;;;;;;;2326:38;;;;;;;;;;;;2383:8;2374:6;;:17;;;;;;;;;;;;;;;;;;2173:225;:::o",
  "source": "pragma solidity ^0.6.2;\n\nimport \"./ERC20.sol\";\nimport \"./Ownable.sol\";\n\n/// @title ALY ERC-20 contract\n/// @author Raphael Pinto Gregorio\n/// @notice Basic ERC-20 token based on OpenZepellin ERC-20 standard\n/// @dev The token has all classic ERC-20 functions: totalSupply(), balanceOf(), transfer(), allowance(), approve(), transferFrom(). It has two decimals.\ncontract TokenERC20Dai is ERC20, Ownable {\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public _totalSupply;\n    address payable private _owner;\n    uint256 private lastExecutionTime;\n\n    event ContractEmptied(address indexed to, uint256 ETHAmount);\n\n    constructor() payable public {\n        name = \"ERC20 Token Dai\";\n        symbol = \"DAI\";\n        decimals = 2;\n        _owner = msg.sender;\n        lastExecutionTime = 0;\n        \n        _mint(msg.sender, 100000000);\n    }\n\n    receive() external payable {}\n\n    function getTokens(uint256 amount) public {\n        require(amount <= 10000000, \"Required amount must be less than 100000\");\n        uint256 executionTime = now;\n        require(executionTime >= lastExecutionTime + 2 * 1 minutes, \"Function can be called every two minutes only, wait\");\n\n        lastExecutionTime = now;\n        _mint(msg.sender, amount);\n    }\n\n    /// @notice withdraw ETH stuck in the contract \n    /// @dev transfer contract's ETH to current owner, emit an event called ContractEmptied\n    /// An event SwapContractEmptied containing the owner address and the ETH amount sent is emitted\n    function withdrawETH() external onlyOwner {\n        address payable self = address(this);\n        uint256 ETHbalance = self.balance;\n\n        _owner.transfer(ETHbalance);\n        emit ContractEmptied(_owner, ETHbalance);\n    }\n}",
  "sourcePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/TokenERC20Dai.sol",
  "ast": {
    "absolutePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/TokenERC20Dai.sol",
    "exportedSymbols": {
      "TokenERC20Dai": [
        1338
      ]
    },
    "id": 1339,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1211,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1212,
        "nodeType": "ImportDirective",
        "scope": 1339,
        "sourceUnit": 458,
        "src": "25:21:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 1213,
        "nodeType": "ImportDirective",
        "scope": 1339,
        "sourceUnit": 706,
        "src": "47:23:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1214,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 457,
              "src": "387:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$457",
                "typeString": "contract ERC20"
              }
            },
            "id": 1215,
            "nodeType": "InheritanceSpecifier",
            "src": "387:5:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1216,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 705,
              "src": "394:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$705",
                "typeString": "contract Ownable"
              }
            },
            "id": 1217,
            "nodeType": "InheritanceSpecifier",
            "src": "394:7:8"
          }
        ],
        "contractDependencies": [
          26,
          457,
          526,
          705
        ],
        "contractKind": "contract",
        "documentation": "@title ALY ERC-20 contract\n @author Raphael Pinto Gregorio\n @notice Basic ERC-20 token based on OpenZepellin ERC-20 standard\n @dev The token has all classic ERC-20 functions: totalSupply(), balanceOf(), transfer(), allowance(), approve(), transferFrom(). It has two decimals.",
        "fullyImplemented": true,
        "id": 1338,
        "linearizedBaseContracts": [
          1338,
          705,
          457,
          526,
          26
        ],
        "name": "TokenERC20Dai",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "06fdde03",
            "id": 1219,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "408:18:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1218,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "408:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "95d89b41",
            "id": 1221,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "432:20:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1220,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "432:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "313ce567",
            "id": 1223,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "458:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1222,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "458:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3eaaf86b",
            "id": 1225,
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "487:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1224,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "487:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1227,
            "name": "_owner",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "520:30:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 1226,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "520:15:8",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1229,
            "name": "lastExecutionTime",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "556:33:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1228,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "556:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1235,
            "name": "ContractEmptied",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1234,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1231,
                  "indexed": true,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1235,
                  "src": "618:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1230,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "618:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1233,
                  "indexed": false,
                  "name": "ETHAmount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1235,
                  "src": "638:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1232,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "638:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "617:39:8"
            },
            "src": "596:61:8"
          },
          {
            "body": {
              "id": 1265,
              "nodeType": "Block",
              "src": "692:194:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1240,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1238,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1219,
                      "src": "702:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "455243323020546f6b656e20446169",
                      "id": 1239,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "709:17:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_6d579404df573296a558f4914441346b83041d023e5971e33455fd32e927e143",
                        "typeString": "literal_string \"ERC20 Token Dai\""
                      },
                      "value": "ERC20 Token Dai"
                    },
                    "src": "702:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1241,
                  "nodeType": "ExpressionStatement",
                  "src": "702:24:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1244,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1242,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1221,
                      "src": "736:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "444149",
                      "id": 1243,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "745:5:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_a5e92f3efb6826155f1f728e162af9d7cda33a574a1153b58f03ea01cc37e568",
                        "typeString": "literal_string \"DAI\""
                      },
                      "value": "DAI"
                    },
                    "src": "736:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1245,
                  "nodeType": "ExpressionStatement",
                  "src": "736:14:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1248,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1246,
                      "name": "decimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1223,
                      "src": "760:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 1247,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "760:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1249,
                  "nodeType": "ExpressionStatement",
                  "src": "760:12:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1250,
                      "name": "_owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1227,
                      "src": "782:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1251,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "791:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1252,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "791:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "782:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 1254,
                  "nodeType": "ExpressionStatement",
                  "src": "782:19:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1257,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1255,
                      "name": "lastExecutionTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1229,
                      "src": "811:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1256,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "831:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "811:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1258,
                  "nodeType": "ExpressionStatement",
                  "src": "811:21:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1260,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "857:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "857:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "313030303030303030",
                        "id": 1262,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "869:9:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        },
                        "value": "100000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        }
                      ],
                      "id": 1259,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 337,
                      "src": "851:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "851:28:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1264,
                  "nodeType": "ExpressionStatement",
                  "src": "851:28:8"
                }
              ]
            },
            "documentation": null,
            "id": 1266,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "674:2:8"
            },
            "returnParameters": {
              "id": 1237,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "692:0:8"
            },
            "scope": 1338,
            "src": "663:223:8",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1269,
              "nodeType": "Block",
              "src": "919:2:8",
              "statements": []
            },
            "documentation": null,
            "id": 1270,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1267,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "899:2:8"
            },
            "returnParameters": {
              "id": 1268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "919:0:8"
            },
            "scope": 1338,
            "src": "892:29:8",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1307,
              "nodeType": "Block",
              "src": "969:318:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1278,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1276,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1272,
                          "src": "987:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "3130303030303030",
                          "id": 1277,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "997:8:8",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000_by_1",
                            "typeString": "int_const 10000000"
                          },
                          "value": "10000000"
                        },
                        "src": "987:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "526571756972656420616d6f756e74206d757374206265206c657373207468616e20313030303030",
                        "id": 1279,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1007:42:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d973989fece76b9ccdc168aef8366074d36410164af9c142abf10edf8c4123bc",
                          "typeString": "literal_string \"Required amount must be less than 100000\""
                        },
                        "value": "Required amount must be less than 100000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d973989fece76b9ccdc168aef8366074d36410164af9c142abf10edf8c4123bc",
                          "typeString": "literal_string \"Required amount must be less than 100000\""
                        }
                      ],
                      "id": 1275,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "979:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1280,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "979:71:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1281,
                  "nodeType": "ExpressionStatement",
                  "src": "979:71:8"
                },
                {
                  "assignments": [
                    1283
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1283,
                      "name": "executionTime",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1307,
                      "src": "1060:21:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1282,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1060:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1285,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1284,
                    "name": "now",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": -17,
                    "src": "1084:3:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1060:27:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1287,
                          "name": "executionTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1283,
                          "src": "1105:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1288,
                            "name": "lastExecutionTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1229,
                            "src": "1122:17:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_rational_120_by_1",
                              "typeString": "int_const 120"
                            },
                            "id": 1291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "32",
                              "id": 1289,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1142:1:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 1290,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1146:9:8",
                              "subdenomination": "minutes",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_60_by_1",
                                "typeString": "int_const 60"
                              },
                              "value": "1"
                            },
                            "src": "1142:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_120_by_1",
                              "typeString": "int_const 120"
                            }
                          },
                          "src": "1122:33:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1105:50:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "46756e6374696f6e2063616e2062652063616c6c65642065766572792074776f206d696e75746573206f6e6c792c2077616974",
                        "id": 1294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1157:53:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_097d63c1fa5d77f19a862e364a789783cdc877f4be8cee0b19579f43b0857750",
                          "typeString": "literal_string \"Function can be called every two minutes only, wait\""
                        },
                        "value": "Function can be called every two minutes only, wait"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_097d63c1fa5d77f19a862e364a789783cdc877f4be8cee0b19579f43b0857750",
                          "typeString": "literal_string \"Function can be called every two minutes only, wait\""
                        }
                      ],
                      "id": 1286,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1097:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1097:114:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1296,
                  "nodeType": "ExpressionStatement",
                  "src": "1097:114:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1297,
                      "name": "lastExecutionTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1229,
                      "src": "1222:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1298,
                      "name": "now",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -17,
                      "src": "1242:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1222:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1300,
                  "nodeType": "ExpressionStatement",
                  "src": "1222:23:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1302,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1261:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1261:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1304,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1272,
                        "src": "1273:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1301,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 337,
                      "src": "1255:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1305,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1255:25:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1306,
                  "nodeType": "ExpressionStatement",
                  "src": "1255:25:8"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "d3c9cc26",
            "id": 1308,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokens",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1273,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1272,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1308,
                  "src": "946:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1271,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "946:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "945:16:8"
            },
            "returnParameters": {
              "id": 1274,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "969:0:8"
            },
            "scope": 1338,
            "src": "927:360:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1336,
              "nodeType": "Block",
              "src": "1580:184:8",
              "statements": [
                {
                  "assignments": [
                    1314
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1314,
                      "name": "self",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1336,
                      "src": "1590:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 1313,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1590:15:8",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1319,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1317,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "1621:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_TokenERC20Dai_$1338",
                          "typeString": "contract TokenERC20Dai"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_TokenERC20Dai_$1338",
                          "typeString": "contract TokenERC20Dai"
                        }
                      ],
                      "id": 1316,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1613:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 1315,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1613:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 1318,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1613:13:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1590:36:8"
                },
                {
                  "assignments": [
                    1321
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1321,
                      "name": "ETHbalance",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1336,
                      "src": "1636:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1320,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1636:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1324,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1322,
                      "name": "self",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1314,
                      "src": "1657:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "id": 1323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1657:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1636:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1328,
                        "name": "ETHbalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1321,
                        "src": "1696:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1325,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1227,
                        "src": "1680:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 1327,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1680:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1680:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1330,
                  "nodeType": "ExpressionStatement",
                  "src": "1680:27:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1332,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1227,
                        "src": "1738:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1333,
                        "name": "ETHbalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1321,
                        "src": "1746:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1331,
                      "name": "ContractEmptied",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1235,
                      "src": "1722:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1334,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1722:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1335,
                  "nodeType": "EmitStatement",
                  "src": "1717:40:8"
                }
              ]
            },
            "documentation": "@notice withdraw ETH stuck in the contract \n @dev transfer contract's ETH to current owner, emit an event called ContractEmptied\n An event SwapContractEmptied containing the owner address and the ETH amount sent is emitted",
            "functionSelector": "e086e5ec",
            "id": 1337,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1311,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1310,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 635,
                  "src": "1570:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1570:9:8"
              }
            ],
            "name": "withdrawETH",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1309,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1558:2:8"
            },
            "returnParameters": {
              "id": 1312,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:0:8"
            },
            "scope": 1338,
            "src": "1538:226:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1339,
        "src": "361:1405:8"
      }
    ],
    "src": "0:1766:8"
  },
  "legacyAST": {
    "absolutePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/TokenERC20Dai.sol",
    "exportedSymbols": {
      "TokenERC20Dai": [
        1338
      ]
    },
    "id": 1339,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1211,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1212,
        "nodeType": "ImportDirective",
        "scope": 1339,
        "sourceUnit": 458,
        "src": "25:21:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/bobby/cryptogama-heroku/cryptogama-heroku/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 1213,
        "nodeType": "ImportDirective",
        "scope": 1339,
        "sourceUnit": 706,
        "src": "47:23:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1214,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 457,
              "src": "387:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$457",
                "typeString": "contract ERC20"
              }
            },
            "id": 1215,
            "nodeType": "InheritanceSpecifier",
            "src": "387:5:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1216,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 705,
              "src": "394:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$705",
                "typeString": "contract Ownable"
              }
            },
            "id": 1217,
            "nodeType": "InheritanceSpecifier",
            "src": "394:7:8"
          }
        ],
        "contractDependencies": [
          26,
          457,
          526,
          705
        ],
        "contractKind": "contract",
        "documentation": "@title ALY ERC-20 contract\n @author Raphael Pinto Gregorio\n @notice Basic ERC-20 token based on OpenZepellin ERC-20 standard\n @dev The token has all classic ERC-20 functions: totalSupply(), balanceOf(), transfer(), allowance(), approve(), transferFrom(). It has two decimals.",
        "fullyImplemented": true,
        "id": 1338,
        "linearizedBaseContracts": [
          1338,
          705,
          457,
          526,
          26
        ],
        "name": "TokenERC20Dai",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "06fdde03",
            "id": 1219,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "408:18:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1218,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "408:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "95d89b41",
            "id": 1221,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "432:20:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1220,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "432:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "313ce567",
            "id": 1223,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "458:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1222,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "458:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3eaaf86b",
            "id": 1225,
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "487:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1224,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "487:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1227,
            "name": "_owner",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "520:30:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 1226,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "520:15:8",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1229,
            "name": "lastExecutionTime",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1338,
            "src": "556:33:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1228,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "556:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1235,
            "name": "ContractEmptied",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1234,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1231,
                  "indexed": true,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1235,
                  "src": "618:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1230,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "618:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1233,
                  "indexed": false,
                  "name": "ETHAmount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1235,
                  "src": "638:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1232,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "638:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "617:39:8"
            },
            "src": "596:61:8"
          },
          {
            "body": {
              "id": 1265,
              "nodeType": "Block",
              "src": "692:194:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1240,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1238,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1219,
                      "src": "702:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "455243323020546f6b656e20446169",
                      "id": 1239,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "709:17:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_6d579404df573296a558f4914441346b83041d023e5971e33455fd32e927e143",
                        "typeString": "literal_string \"ERC20 Token Dai\""
                      },
                      "value": "ERC20 Token Dai"
                    },
                    "src": "702:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1241,
                  "nodeType": "ExpressionStatement",
                  "src": "702:24:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1244,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1242,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1221,
                      "src": "736:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "444149",
                      "id": 1243,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "745:5:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_a5e92f3efb6826155f1f728e162af9d7cda33a574a1153b58f03ea01cc37e568",
                        "typeString": "literal_string \"DAI\""
                      },
                      "value": "DAI"
                    },
                    "src": "736:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1245,
                  "nodeType": "ExpressionStatement",
                  "src": "736:14:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1248,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1246,
                      "name": "decimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1223,
                      "src": "760:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 1247,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "760:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1249,
                  "nodeType": "ExpressionStatement",
                  "src": "760:12:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1250,
                      "name": "_owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1227,
                      "src": "782:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1251,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "791:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1252,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "791:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "782:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 1254,
                  "nodeType": "ExpressionStatement",
                  "src": "782:19:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1257,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1255,
                      "name": "lastExecutionTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1229,
                      "src": "811:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1256,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "831:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "811:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1258,
                  "nodeType": "ExpressionStatement",
                  "src": "811:21:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1260,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "857:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "857:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "313030303030303030",
                        "id": 1262,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "869:9:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        },
                        "value": "100000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        }
                      ],
                      "id": 1259,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 337,
                      "src": "851:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "851:28:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1264,
                  "nodeType": "ExpressionStatement",
                  "src": "851:28:8"
                }
              ]
            },
            "documentation": null,
            "id": 1266,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "674:2:8"
            },
            "returnParameters": {
              "id": 1237,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "692:0:8"
            },
            "scope": 1338,
            "src": "663:223:8",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1269,
              "nodeType": "Block",
              "src": "919:2:8",
              "statements": []
            },
            "documentation": null,
            "id": 1270,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1267,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "899:2:8"
            },
            "returnParameters": {
              "id": 1268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "919:0:8"
            },
            "scope": 1338,
            "src": "892:29:8",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1307,
              "nodeType": "Block",
              "src": "969:318:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1278,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1276,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1272,
                          "src": "987:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "3130303030303030",
                          "id": 1277,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "997:8:8",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000_by_1",
                            "typeString": "int_const 10000000"
                          },
                          "value": "10000000"
                        },
                        "src": "987:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "526571756972656420616d6f756e74206d757374206265206c657373207468616e20313030303030",
                        "id": 1279,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1007:42:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d973989fece76b9ccdc168aef8366074d36410164af9c142abf10edf8c4123bc",
                          "typeString": "literal_string \"Required amount must be less than 100000\""
                        },
                        "value": "Required amount must be less than 100000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d973989fece76b9ccdc168aef8366074d36410164af9c142abf10edf8c4123bc",
                          "typeString": "literal_string \"Required amount must be less than 100000\""
                        }
                      ],
                      "id": 1275,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "979:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1280,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "979:71:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1281,
                  "nodeType": "ExpressionStatement",
                  "src": "979:71:8"
                },
                {
                  "assignments": [
                    1283
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1283,
                      "name": "executionTime",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1307,
                      "src": "1060:21:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1282,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1060:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1285,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1284,
                    "name": "now",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": -17,
                    "src": "1084:3:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1060:27:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1287,
                          "name": "executionTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1283,
                          "src": "1105:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1288,
                            "name": "lastExecutionTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1229,
                            "src": "1122:17:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_rational_120_by_1",
                              "typeString": "int_const 120"
                            },
                            "id": 1291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "32",
                              "id": 1289,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1142:1:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 1290,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1146:9:8",
                              "subdenomination": "minutes",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_60_by_1",
                                "typeString": "int_const 60"
                              },
                              "value": "1"
                            },
                            "src": "1142:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_120_by_1",
                              "typeString": "int_const 120"
                            }
                          },
                          "src": "1122:33:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1105:50:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "46756e6374696f6e2063616e2062652063616c6c65642065766572792074776f206d696e75746573206f6e6c792c2077616974",
                        "id": 1294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1157:53:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_097d63c1fa5d77f19a862e364a789783cdc877f4be8cee0b19579f43b0857750",
                          "typeString": "literal_string \"Function can be called every two minutes only, wait\""
                        },
                        "value": "Function can be called every two minutes only, wait"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_097d63c1fa5d77f19a862e364a789783cdc877f4be8cee0b19579f43b0857750",
                          "typeString": "literal_string \"Function can be called every two minutes only, wait\""
                        }
                      ],
                      "id": 1286,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1097:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1097:114:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1296,
                  "nodeType": "ExpressionStatement",
                  "src": "1097:114:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1297,
                      "name": "lastExecutionTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1229,
                      "src": "1222:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1298,
                      "name": "now",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -17,
                      "src": "1242:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1222:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1300,
                  "nodeType": "ExpressionStatement",
                  "src": "1222:23:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1302,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1261:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1261:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1304,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1272,
                        "src": "1273:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1301,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 337,
                      "src": "1255:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1305,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1255:25:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1306,
                  "nodeType": "ExpressionStatement",
                  "src": "1255:25:8"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "d3c9cc26",
            "id": 1308,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokens",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1273,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1272,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1308,
                  "src": "946:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1271,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "946:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "945:16:8"
            },
            "returnParameters": {
              "id": 1274,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "969:0:8"
            },
            "scope": 1338,
            "src": "927:360:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1336,
              "nodeType": "Block",
              "src": "1580:184:8",
              "statements": [
                {
                  "assignments": [
                    1314
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1314,
                      "name": "self",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1336,
                      "src": "1590:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 1313,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1590:15:8",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1319,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1317,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "1621:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_TokenERC20Dai_$1338",
                          "typeString": "contract TokenERC20Dai"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_TokenERC20Dai_$1338",
                          "typeString": "contract TokenERC20Dai"
                        }
                      ],
                      "id": 1316,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1613:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 1315,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1613:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 1318,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1613:13:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1590:36:8"
                },
                {
                  "assignments": [
                    1321
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1321,
                      "name": "ETHbalance",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1336,
                      "src": "1636:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1320,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1636:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1324,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1322,
                      "name": "self",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1314,
                      "src": "1657:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "id": 1323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1657:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1636:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1328,
                        "name": "ETHbalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1321,
                        "src": "1696:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1325,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1227,
                        "src": "1680:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 1327,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1680:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1680:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1330,
                  "nodeType": "ExpressionStatement",
                  "src": "1680:27:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1332,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1227,
                        "src": "1738:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1333,
                        "name": "ETHbalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1321,
                        "src": "1746:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1331,
                      "name": "ContractEmptied",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1235,
                      "src": "1722:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1334,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1722:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1335,
                  "nodeType": "EmitStatement",
                  "src": "1717:40:8"
                }
              ]
            },
            "documentation": "@notice withdraw ETH stuck in the contract \n @dev transfer contract's ETH to current owner, emit an event called ContractEmptied\n An event SwapContractEmptied containing the owner address and the ETH amount sent is emitted",
            "functionSelector": "e086e5ec",
            "id": 1337,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1311,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1310,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 635,
                  "src": "1570:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1570:9:8"
              }
            ],
            "name": "withdrawETH",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1309,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1558:2:8"
            },
            "returnParameters": {
              "id": 1312,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:0:8"
            },
            "scope": 1338,
            "src": "1538:226:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1339,
        "src": "361:1405:8"
      }
    ],
    "src": "0:1766:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.2+commit.bacdbe57.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x5985Db3C6294D1716d8b6eF8c45B659B68b5dc8a",
      "transactionHash": "0x236ea06b4c93a03950f494d08bef350b452bec21812f72c8b0c6c765c06cc7aa"
    }
  },
  "schemaVersion": "3.1.0",
  "updatedAt": "2020-05-11T17:03:16.079Z",
  "devdoc": {
    "author": "Raphael Pinto Gregorio",
    "details": "The token has all classic ERC-20 functions: totalSupply(), balanceOf(), transfer(), allowance(), approve(), transferFrom(). It has two decimals.",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}. "
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH()": {
        "details": "transfer contract's ETH to current owner, emit an event called ContractEmptied An event SwapContractEmptied containing the owner address and the ETH amount sent is emitted"
      }
    },
    "title": "ALY ERC-20 contract"
  },
  "userdoc": {
    "methods": {
      "withdrawETH()": {
        "notice": "withdraw ETH stuck in the contract "
      }
    },
    "notice": "Basic ERC-20 token based on OpenZepellin ERC-20 standard"
  }
}